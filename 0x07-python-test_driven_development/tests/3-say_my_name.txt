The ``3-say_my_name`` Module
============================

Using ``say_my_name``
-------------------

Importing the function from the module:

	>>> say_my_name = __import__('3-say_my_name').say_my_name

Checking for module docstring:

	>>> m = __import__('3-say_my_name').__doc__
	>>> len(m) > 1
	True

Checking for function docstring:

	>>> f = __import__('3-say_my_name').say_my_name.__doc__
	>>> len(f) > 1
	True

Checking for two str args:

	>>> say_my_name("John", "Smith")
	My name is John Smith

Checking for one str arg:

	>>> say_my_name("Bob")
	My name is Bob 

Checking for one int arg and str arg:

	>>> say_my_name(12, "White") # doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string

Checking for None as an arg:

	>>> say_my_name(None, "Hello") # doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string

Checking for int last name:

	>>> say_my_name("Sandra", 4) # doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	...
	TypeError: last_name must be a string

Checking for None as an arg:

	>>> say_my_name("Hello", None) # doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	...
	TypeError: last_name must be a string

Checking for 3 args:

	>>> say_my_name("Boss", "Hello", "Niat") # doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	...
	TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given

Checking for a list of str:

	>>> say_my_name('First', ['Last', 'Susie']) # doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	...
	TypeError: last_name must be a string

Checking for an empty str in first_name:

	>>> say_my_name("", "Howe") # doctest: +IGNORE_EXCEPTION_DETAIL
	My name is  Howe

Checking for no arg:

	>>> say_my_name() # doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	...
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'

